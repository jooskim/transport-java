import { EventBus, MessageFunction, StompParser } from '@vmw/bifrost';
import { Seed } from './service.model';
import { GalacticRequest } from '@vmw/bifrost/bus/model/request.model';
import { GalacticResponse } from '@vmw/bifrost/bus/model/response.model';

// autogenerated
export class ServiceApi {

    protected bus: EventBus;
    
    // services
    protected SeedService: SeedService;
    
    constructor() {
        this.bus = window.AppEventBus;
        this.initiateServiceApi();
    }

    private makeServiceRequest<ReqT, RespT>(request: GalacticRequest<ReqT>, 
                                            channel: string, 
                                            handler: MessageFunction<RespT>) {

        this.bus.requestGalactic(channel, request,
            (response: GalacticResponse<RespT>) => {
                if(handler) {
                    handler(response.payload);
                }
            }    
        );
    }

    private initiateServiceApi() {
        this.SeedService = this.createSeedService();
    }

    private createSeedService(): SeedService {
        return {
            getSeeds: (handler: MessageFunction<Seed[]>) => {
                this.makeServiceRequest(
                    new GalacticRequest("GetSeeds", null, StompParser.genUUID(), 1),
                    'service-seed',
                     handler
                );
            },
        
            plantSeed: (seed: Seed, handler: MessageFunction<Seed[]>) => {
                this.makeServiceRequest(
                    new GalacticRequest("PlantSeed", seed, StompParser.genUUID(), 1),
                    'service-seed', 
                    handler
                );
            },
        
            killPlant: (seed: Seed, handler: MessageFunction<Seed[]>) => {
                this.makeServiceRequest(
                    new GalacticRequest("KillPlant", seed, StompParser.genUUID(), 1),
                    'service-seed', 
                    handler
                );
            }
        }
    }   
}

export interface SeedService {
    getSeeds(handler: MessageFunction<Seed[]>): void;
    plantSeed(seed: Seed, handler: MessageFunction<Seed[]>): void
    killPlant(seed: Seed, handler: MessageFunction<Seed[]>): void
}