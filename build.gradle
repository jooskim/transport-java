buildscript {
    ext {
        springBootVersion = '1.5.18.RELEASE'
        //springBootVersion = '2.3.5.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

// Configure Lombok
plugins {
    id 'io.franzbecker.gradle-lombok' version '1.14'
}
apply plugin: 'java-library'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'osgi'

group = 'com.vmware.transport'
sourceCompatibility = 1.8

ext.generatedResourcesOutputDir = file("$buildDir/generated-resources")

initProperties()

task generateTransportPropertiesFile {
    ext.outputFile = file("$generatedResourcesOutputDir/transport.properties")
    outputs.file(outputFile)
    doLast {
        outputFile.text = "transport.version=$version"
    }
}

sourceSets {
    main {
        // Register the generated-resources dir on the main sourceSet.
        output.dir generatedResourcesOutputDir, builtBy: generateTransportPropertiesFile
    }
}

jar {
    from sourceSets.main.output
    include 'com/vmware/transport/**/*'
    include 'transport.properties'

    manifest {
        instruction 'Import-Package', 'org.springframework.beans', '*'
        attributes (
                'Bundle-Name': 'Transport',
                'Bundle-Version': version,
                'Bundle-SymbolicName': 'com.vmware.transport'
        )
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-websocket:$springBootVersion"
    runtime "org.springframework.boot:spring-boot-starter-websocket:$springBootVersion"

    implementation "org.springframework.security:spring-security-web:4.2.2.RELEASE"
    runtime "org.springframework.security:spring-security-web:4.2.2.RELEASE"

    runtime "io.reactivex.rxjava2:rxjava:2.1.9"
    implementation "io.reactivex.rxjava2:rxjava:2.1.9"

    implementation group: "org.slf4j", name: "slf4j-api", version: "1.7.25"
    runtime group: "org.slf4j", name: "slf4j-api", version: "1.7.25"

    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    runtime group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

    implementation 'com.google.code.gson:gson:2.8.1'
    runtime 'com.google.code.gson:gson:2.8.1'

    annotationProcessor "org.projectlombok:lombok:1.18.8"

    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
    runtime group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'

    testImplementation "org.springframework.security:spring-security-config:4.2.2.RELEASE"
    testImplementation "org.springframework.security:spring-security-test:4.2.2.RELEASE"
    testImplementation 'org.mockito:mockito-core:2.+'
    testImplementation 'org.powermock:powermock-module-junit4:1.7.1'
    testImplementation('com.github.tomakehurst:wiremock:2.19.0')
    testImplementation "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
    testImplementation("junit:junit")
}

test {
    testLogging {
        showStandardStreams = true
        afterSuite { desc, result ->
            if (!desc.parent) { // true after all suites have executed and final result available.
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
}

jacoco {
    toolVersion = "0.8.0"
}

jacocoTestReport {
    reports {
        xml.enabled false
        html.enabled true
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it)
        })
    }
}

void initProperties() {
    version = rootProject.file('version.txt').getText('UTF-8').trim()
    if ("snapshot".compareTo(buildType) == 0) {
        version = version + "-SNAPSHOT"
    }
}