buildscript {
    ext {
        //springBootVersion = '2.0.1.RELEASE'
        springBootVersion = '1.5.18.RELEASE'
    }
    repositories {
        maven { url "http://build-squid.eng.vmware.com/nexus/content/groups/repo" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

// Configure latest Lombok
plugins {
    id 'io.franzbecker.gradle-lombok' version '1.14'
}
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'idea'
apply plugin: 'jacoco'

def profiles = 'prod'

group = 'com.vmware.bifrost'
sourceCompatibility = 1.8

initProperties()

// TODO: change this once https://gitlab.eng.vmware.com/bifrost/java/merge_requests/78 is merged
// e.g. ext.bifrost_version = "[0.0.15,)"
ext.bifrost_version = "0.0.15"
ext.generatedResourcesOutputDir = file("$buildDir/resources")

task generateBifrostVersionPropertiesFile {
    ext.outputFile = file("$generatedResourcesOutputDir/main/version.properties")
    outputs.file(outputFile)
    doLast {
        outputFile.text = "bifrost-csp.version=$version"
    }
}

sourceSets {
    main {
        // Register the generated-resources dir on the main sourceSet.
        output.dir generatedResourcesOutputDir, builtBy: generateBifrostVersionPropertiesFile
    }
}

jar {
    enabled = true

    // Exclude application, samples and oldsamples resources and classes
    from sourceSets.main.output
    include 'com/vmware/bifrost/**/*'
    include 'bifrost-csp.properties'
    
    
}

repositories {
    maven { url "http://build-squid.eng.vmware.com/nexus/content/groups/repo" }
}

// Maven artifact publishing using the maven-publish plugin.
publishing {
    publications {
        // Publishes
        mavenJava(MavenPublication) {
            // Publishes a POM to maven repo.
            from components.java
        }
    }

    repositories {
        maven {
            // To publish to the build-artifactory:
            //
            // 1. Ensure you have write access to the bifrost-maven-local repo.
            // 2. Update the version in "version.txt" file.
            // 3. Run "gradlew publish" task by specifying your credentials using the
            //    mavenUser and mavenPassword gradle properties. This can be done via:
            //       - command line arguments - "gradlew publish -PmavenUser=user -PmavenPassword=password"
            //       - the local gradle.properties file, usually located in USER_HOME/.gradle/gradle.properties
            //
            // To test you changes during development, you can publish project's jars
            // to your maven local repo by running "gradlew publishToMavenLocal" task.
            credentials {
                username mavenUser
                password mavenPassword
            }
            name = 'build-artifactory'
            url = "https://build-artifactory.eng.vmware.com/artifactory/bifrost-maven-local"
        }
    }
}

dependencies {
    implementation "com.vmware.bifrost:vmw-bifrost:$bifrost_version"
    runtime "com.vmware.bifrost:vmw-bifrost:$bifrost_version"

    implementation group: 'commons-configuration', name: 'commons-configuration', version: '1.7'
    runtime group: 'commons-configuration', name: 'commons-configuration', version: '1.7'

    // TODO: remove unnecessary deps
    implementation "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
    runtime "org.springframework.boot:spring-boot-starter-web:$springBootVersion"

    implementation "org.springframework.boot:spring-boot-starter-websocket:$springBootVersion"
    runtime "org.springframework.boot:spring-boot-starter-websocket:$springBootVersion"

    implementation "org.springframework.security:spring-security-web:4.2.2.RELEASE"
    runtime "org.springframework.security:spring-security-web:4.2.2.RELEASE"

    implementation "org.springframework.security:spring-security-config:4.2.2.RELEASE"
    runtime "org.springframework.security:spring-security-config:4.2.2.RELEASE"

    implementation "org.springframework.security:spring-security-test:4.2.2.RELEASE"

    runtime "io.reactivex.rxjava2:rxjava:2.1.9"
    implementation "io.reactivex.rxjava2:rxjava:2.1.9"

    implementation group: "com.fasterxml.jackson.core", name: "jackson-databind", version: "2.9.4"
    runtime group: "com.fasterxml.jackson.core", name: "jackson-databind", version: "2.9.4"

    implementation "com.fasterxml.jackson.module:jackson-module-jsonSchema:2.9.4"
    runtime "com.fasterxml.jackson.module:jackson-module-jsonSchema:2.9.4"

    implementation group: "org.slf4j", name: "slf4j-api", version: "1.7.25"
    runtime group: "org.slf4j", name: "slf4j-api", version: "1.7.25"

    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    runtime group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

    implementation 'com.google.code.gson:gson:2.8.1'
    runtime 'com.google.code.gson:gson:2.8.1'

    implementation 'joda-time:joda-time:2.9.9'
    runtime 'joda-time:joda-time:2.9.9'

    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.6'
    runtime group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.6'

    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'
    runtime group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'

    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.2'
    runtime group: 'io.jsonwebtoken', name: 'jjwt', version: '0.2'

    testImplementation group: 'org.springframework', name: 'spring-web', version: "4.3.21.RELEASE"
    testImplementation 'org.mockito:mockito-core:2.+'
    testImplementation 'org.powermock:powermock-module-junit4:1.7.4'
    testImplementation 'org.powermock:powermock-core:1.7.4'
    testImplementation 'org.powermock:powermock-module-junit4-rule:1.7.4'
    testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: '1.7.4'
    testImplementation('com.github.tomakehurst:wiremock:2.19.0')
    testImplementation "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
    testImplementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.2'
    testImplementation("junit:junit")
}

jacoco {
    toolVersion = "0.8.0"
}

project.ext.jacocoOfflineSourceSets = ['main']
task instrument(dependsOn: ['classes', project.configurations.jacocoAnt]) {
    inputs.files classes.outputs.files
    File outputDir = new File(project.buildDir, 'instrumentedClasses')
    outputs.dir outputDir
    doFirst {
        project.delete(outputDir)
        ant.taskdef(
                resource: 'org/jacoco/ant/antlib.xml',
                classpath: project.configurations.jacocoAnt.asPath,
                uri: 'jacoco'
        )
        def instrumented = false
        jacocoOfflineSourceSets.each { sourceSetName ->
            if (file(sourceSets[sourceSetName].output.classesDir).exists()) {
                def instrumentedClassedDir = "${outputDir}/${sourceSetName}"
                ant.'jacoco:instrument'(destdir: instrumentedClassedDir) {
                    fileset(dir: sourceSets[sourceSetName].output.classesDir, includes: '**/*.class')
                }
                //Replace the classes dir in the test classpath with the instrumented one
                sourceSets.test.runtimeClasspath -= files(sourceSets[sourceSetName].output.classesDir)
                sourceSets.test.runtimeClasspath += files(instrumentedClassedDir)
                instrumented = true
            }
        }
        if (instrumented) {
            //Disable class verification based on https://github.com/jayway/powermock/issues/375
            test.jvmArgs += '-noverify'
        }
    }
}

test.dependsOn(instrument)

jacocoTestReport {
    reports {
        xml.enabled false
        html.enabled true
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it)
        })
    }
}

void initProperties() {
    version = rootProject.file('version.txt').getText('UTF-8').trim()
    if ("snapshot".compareTo(buildType) == 0) {
        version = version + "-SNAPSHOT"
    } else if ("release".compareTo(buildType) == 0) {
        version = version + "-RELEASE"
    }

    if (System.getenv("bifrost_maven_user")?.trim()) {
        mavenUser = System.getenv("bifrost_maven_user").trim()
    }

    if (System.getenv("bifrost_maven_password")?.trim()) {
        mavenPassword = System.getenv("bifrost_maven_password").trim()
    }
}
