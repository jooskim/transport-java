buildscript {
    ext {
        springBootVersion = '2.0.1.RELEASE'
    }
    repositories {
        maven { url "http://build-squid.eng.vmware.com/nexus/content/groups/repo" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

// Configure latest Lombok
plugins {
    id 'io.franzbecker.gradle-lombok' version '1.14'
}
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'idea'
apply plugin: 'jacoco'

jar {
    enabled = true
}

bootJar {
    classifier = 'boot'
    manifest {
        attributes(
                'Main-Class': 'oldsamples.Application'
        )
    }
}

def profiles = 'prod'

group = 'com.vmware.bifrost'
sourceCompatibility = 1.8

initProperties()

repositories {
    maven { url "http://build-squid.eng.vmware.com/nexus/content/groups/repo" }
}

// Maven artifact publishing using the maven-publish plugin.
publishing {
    publications {
        // Publishes
        mavenJava(MavenPublication) {
            // Publishes a POM to maven repo.
            from components.java
        }
    }

    repositories {
        maven {
            // To publish to the build-artifactory:
            //
            // 1. Ensure you have write access to the bifrost-maven-local repo.
            // 2. Update the version in "version.txt" file.
            // 3. Run "gradlew publish" task by specifying your credentials using the
            //    mavenUser and mavenPassword gradle properties. This can be done via:
            //       - command line arguments - "gradlew publish -PmavenUser=user -PmavenPassword=password"
            //       - the local gradle.properties file, usually located in USER_HOME/.gradle/gradle.properties
            //
            // To test you changes during development, you can publish project's jars
            // to your maven local repo by running "gradlew publishToMavenLocal" task.
            credentials {
                username mavenUser
                password mavenPassword
            }
            name = 'build-artifactory'
            url = "https://build-artifactory.eng.vmware.com/artifactory/bifrost-maven-local"
        }
    }
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-webflux')
    implementation('org.springframework.boot:spring-boot-starter-websocket')
    implementation('org.springframework.security:spring-security-web:5.0.0.RELEASE')
    implementation('org.springframework.security:spring-security-config:5.0.0.RELEASE')
    implementation('org.springframework.security:spring-security-test:5.0.0.RELEASE')
    runtime "io.reactivex.rxjava2:rxjava:2.1.9"
    implementation "io.reactivex.rxjava2:rxjava:2.1.9"
    implementation group: "com.fasterxml.jackson.core", name: "jackson-databind", version: "2.9.4"
    implementation "com.fasterxml.jackson.module:jackson-module-jsonSchema:2.9.4"
    implementation group: "org.slf4j", name: "slf4j-api", version: "1.7.25"
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    implementation 'com.google.code.gson:gson:2.8.1'
    implementation 'joda-time:joda-time:2.9.9'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.6'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'

    testImplementation group: 'org.springframework', name: 'spring-web', version: '5.0.3.RELEASE'
    testImplementation 'org.mockito:mockito-core:2.+'
    testImplementation 'org.powermock:powermock-module-junit4:1.7.1'
    testImplementation('com.github.tomakehurst:wiremock:2.19.0')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('io.projectreactor:reactor-test')
    testImplementation("junit:junit")
}

test {
    testLogging {
        showStandardStreams = true
        afterSuite { desc, result ->
            if (!desc.parent) { // true after all suites have executed and final result available.
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
}

jacoco {
    toolVersion = "0.8.0"
}

jacocoTestReport {
    reports {
        xml.enabled false
        html.enabled true
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: 'oldsamples/**')
        })
    }
}

void initProperties() {
    version = rootProject.file('version.txt').getText('UTF-8').trim()
    if ("snapshot".compareTo(buildType) == 0) {
        version = version + "-SNAPSHOT"
    }

    if (System.getenv("bifrost_maven_user")?.trim()) {
        mavenUser = System.getenv("bifrost_maven_user").trim()
    }

    if (System.getenv("bifrost_maven_password")?.trim()) {
        mavenPassword = System.getenv("bifrost_maven_password").trim()
    }
}