import { EventBus, MessageFunction, StompParser } from '@vmw/bifrost';
import { Seed } from './service.model';
import { GalacticRequest } from '@vmw/bifrost/bus/model/request.model';
import { GalacticResponse } from '@vmw/bifrost/bus/model/response.model';

// autogenerated
export class ServiceApi {

    protected bus: EventBus;
    constructor() {
        this.bus = window.AppEventBus;
    }

    private makeServiceRequest<ReqT, RespT>(request: GalacticRequest<ReqT>, 
                                            channel: string, 
                                            handler: MessageFunction<RespT>) {

        this.bus.requestGalactic(channel, request,
            (response: GalacticResponse<RespT>) => {
                if(handler) {
                    handler(response.payload);
                }
            }    
        );
    }

    public getSeeds(handler: MessageFunction<Seed[]>): void {
        this.makeServiceRequest(
            new GalacticRequest("GetSeeds", null, StompParser.genUUID(), 1),
            'service-seed',
             handler
        );
    }

    public plantSeed(seed: Seed, handler: MessageFunction<Seed[]>): void {
        this.makeServiceRequest(
            new GalacticRequest("PlantSeed", seed, StompParser.genUUID(), 1),
            'service-seed', 
            handler
        );
    }

    public killPlant(seed: Seed, handler: MessageFunction<Seed[]>): void {
        this.makeServiceRequest(
            new GalacticRequest("KillPlant", seed, StompParser.genUUID(), 1),
            'service-seed', 
            handler
        );
    }
}